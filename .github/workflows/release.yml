name: Release New Version

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type - major, minor or patch'
        required: true
        default: 'patch'

jobs:
  create-release-draft:
    runs-on: ubuntu-latest
    steps:
      -
        name: Clone Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      -
        name: Setup Node version
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      -
        name: Setup Git
        run: |
          git config --global user.name "devx-sauce-bot"
          git config --global user.email "devx.bot@saucelabs.com"
      -
        name: Install dependencies
        run: npm ci
      -
        name: Release
        run: npm run release:ci -- ${{github.event.inputs.releaseType}}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  release-docker:
    runs-on: ubuntu-latest
    needs: [create-release-draft]
    steps:
      -
        name: Find Draft tag
        id: prep
        run: |
          VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[0] | select(.draft == true) | .tag_name')
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[0] | select(.draft == true) | .id')
          if [ "${VERSION}" = "" ];then
            echo "No draft version found"
            exit 1
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=release_id::${RELEASE_ID}
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.prep.output.version }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1      
      # -
      #   name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     context: .
      #     file: ./Dockerfile
      #     tags: |
      #       saucelabs/stt-cypress-mocha-node:latest
      #       saucelabs/stt-cypress-mocha-node:${{ steps.prep.outputs.version }}
      #     build-args: |
      #       BUILD_TAG=${{ steps.prep.outputs.version }}

  release-windows-bundle:
    runs-on: windows-latest
    needs: [create-release-draft]
    steps:
      -
        name: Find draft tag
        id: prep
        run: |
          $res = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers @{'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'}
          $jsonObj = ConvertFrom-Json $([String]::new($res.Content))
          $latestRelease = $jsonObj[0]
          $draft = $latestRelease.draft
          $tagName = $latestRelease.tag_name
          $releaseId = $latestRelease.id

          if ( ! $draft ) {
            exit 1
          }

          if ( $tagName -eq "" ) {
            echo "No draft version found"
            exit 1
          }
          Write-Output "::set-output name=version::$tagName"
          Write-Output "::set-output name=release_id::$releaseId"
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.prep.output.version }}
      -
        name: Use Node.js v14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      -
        run: npm ci --production
      -
        name: Bundle Directory
        run: bash ./scripts/bundle.sh
      -
        name: List bundle contents
        run: ls -R bundle/
      -
        name: Archive bundle
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Compress-Archive bundle/ sauce-testcafe-win.zip
          azPSVersion: '3.1.0'
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.prep.outputs.release_id }}/assets?name=sauce-testcafe-runner.zip
          asset_path: ./sauce-testcafe-win.zip
          asset_name: sauce-testcafe-win.zip
          asset_content_type: application/zip

  release-template-bundle:
    runs-on: ubuntu-latest
    needs: [create-release-draft]
    steps:
      -
        name: Find Draft tag
        id: prep
        run: |
          VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[0] | select(.draft == true) | .tag_name')
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[0] | select(.draft == true) | .id')
          if [ "${VERSION}" = "" ];then
            echo "No draft version found"
            exit 1
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=release_id::${RELEASE_ID}
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.prep.output.version }}
      -
        name: Use Node.js v14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      -
        name: Print release id
        run: echo ${{ steps.prep.outputs.release_id }}
      -
        name: Archive template
        run: cd .saucetpl && tar -czf ../saucetpl.tar.gz .
      -
        name: Upload Template Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.prep.outputs.release_id }}/assets?name=saucetpl.tar.gz
          asset_path: ./saucetpl.tar.gz
          asset_name: saucetpl.tar.gz
          asset_content_type: application/tar+gzip

  publish-release:
    runs-on: ubuntu-latest
    needs: [release-docker, release-windows-bundle, release-template-bundle]
    steps:
      -
        name: Publish release
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[0] | select(.draft == true) | .id')
          if [ "${RELEASE_ID}" -eq "" ];then
            exit 1
          fi
          curl -f -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID} \
            -d '{"draft":"false"}'